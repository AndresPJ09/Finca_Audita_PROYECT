// <auto-generated />
using System;
using Entity.Model.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entity.Migrations
{
    [DbContext(typeof(ApplicationDbContexts))]
    [Migration("20240810032801_Incial5")]
    partial class Incial5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Dto.FarmsDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ciudad_id")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("Usuario_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("FarmsDto");
                });

            modelBuilder.Entity("Entity.Model.Operational.AssessmentCriteria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rating_range")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type_criterian")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("assessment_criteria");
                });

            modelBuilder.Entity("Entity.Model.Operational.CheckLists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Calification_total")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("checkLists");
                });

            modelBuilder.Entity("Entity.Model.Operational.Crops", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("crops");
                });

            modelBuilder.Entity("Entity.Model.Operational.Evidences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Core")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("evidences");
                });

            modelBuilder.Entity("Entity.Model.Operational.FarmCrops", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_At")
                        .HasColumnType("datetime2");

                    b.Property<string>("Crop_id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Deleted_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("Farm_id")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("cropdsId")
                        .HasColumnType("int");

                    b.Property<int>("farmsId")
                        .HasColumnType("int");

                    b.Property<int>("num_hectareas")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("cropdsId");

                    b.HasIndex("farmsId");

                    b.ToTable("farmCrops");
                });

            modelBuilder.Entity("Entity.Model.Operational.Farms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ciudad_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Usuario_id")
                        .HasColumnType("int");

                    b.Property<int>("ciudadId")
                        .HasColumnType("int");

                    b.Property<int>("usuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ciudadId");

                    b.HasIndex("usuarioId");

                    b.ToTable("farms");
                });

            modelBuilder.Entity("Entity.Model.Operational.Fertilization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateFertilization")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuantityMix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeFertilization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("reviewTechnicals_id")
                        .HasColumnType("int");

                    b.Property<int>("reviewTechnicalssId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("reviewTechnicalssId");

                    b.ToTable("fertilizations");
                });

            modelBuilder.Entity("Entity.Model.Operational.FertilizationSupplies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dose")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("fertilizationId")
                        .HasColumnType("int");

                    b.Property<int>("fertilization_id")
                        .HasColumnType("int");

                    b.Property<int>("suppliesId")
                        .HasColumnType("int");

                    b.Property<int>("supplies_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fertilizationId");

                    b.HasIndex("suppliesId");

                    b.ToTable("FertilizationSupplies");
                });

            modelBuilder.Entity("Entity.Model.Operational.FumigationSupplies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Doce")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("fumigation_id")
                        .HasColumnType("int");

                    b.Property<int>("fumigationsId")
                        .HasColumnType("int");

                    b.Property<int>("suppliesId")
                        .HasColumnType("int");

                    b.Property<int>("supplies_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("fumigationsId");

                    b.HasIndex("suppliesId");

                    b.ToTable("fumigationSupplies");
                });

            modelBuilder.Entity("Entity.Model.Operational.Fumigations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateFumigation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("QuiantityMix")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("reviewTechnicalsId")
                        .HasColumnType("int");

                    b.Property<int>("reviewTechnicals_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("reviewTechnicalsId");

                    b.ToTable("Fumigations");
                });

            modelBuilder.Entity("Entity.Model.Operational.Qualifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Assessment_criterian_id")
                        .HasColumnType("int");

                    b.Property<int>("Checklist_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification_criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("assessment_criterianId")
                        .HasColumnType("int");

                    b.Property<int>("checklistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("assessment_criterianId");

                    b.HasIndex("checklistId");

                    b.ToTable("qualifications");
                });

            modelBuilder.Entity("Entity.Model.Operational.ReviewEvidences", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Evidence_id")
                        .HasColumnType("int");

                    b.Property<int>("EvidencesId")
                        .HasColumnType("int");

                    b.Property<int?>("FumigationsId")
                        .HasColumnType("int");

                    b.Property<int>("ReviewTechnicals_id")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("reviewTechnicalsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvidencesId");

                    b.HasIndex("FumigationsId");

                    b.HasIndex("reviewTechnicalsId");

                    b.ToTable("reviewEvidences");
                });

            modelBuilder.Entity("Entity.Model.Operational.ReviewTechnicals", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Date_review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tecnico_id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("checkLists_id")
                        .HasColumnType("int");

                    b.Property<int>("checkListsdId")
                        .HasColumnType("int");

                    b.Property<int>("farm_id")
                        .HasColumnType("int");

                    b.Property<int>("farmsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("checkListsdId");

                    b.HasIndex("farmsId");

                    b.ToTable("reviewTechnicals");
                });

            modelBuilder.Entity("Entity.Model.Operational.Supplies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("priece")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("Entity.Model.Security.Modulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("modulo");
                });

            modelBuilder.Entity("Entity.Model.Security.Persona", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Ciudad_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("ciudadId")
                        .HasColumnType("int");

                    b.Property<string>("correo_electronico")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("documento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fecha_de_nacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("primer_nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("segundo_nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tipo_de_documento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ciudadId");

                    b.ToTable("persona");
                });

            modelBuilder.Entity("Entity.Model.Security.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("rol");
                });

            modelBuilder.Entity("Entity.Model.Security.RolVista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rol_id")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("Vista_id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Rol_id");

                    b.HasIndex("Vista_id");

                    b.ToTable("rol_vista");
                });

            modelBuilder.Entity("Entity.Model.Security.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Persona_id")
                        .HasColumnType("int");

                    b.Property<int?>("RolId")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Persona_id");

                    b.HasIndex("RolId");

                    b.ToTable("usuario");
                });

            modelBuilder.Entity("Entity.Model.Security.UsuarioRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rol_id")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("Usuario_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Rol_id");

                    b.HasIndex("Usuario_Id");

                    b.ToTable("usuario_rol");
                });

            modelBuilder.Entity("Entity.Model.Security.Vista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Modulo_id")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ruta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Modulo_id");

                    b.ToTable("vistas");
                });

            modelBuilder.Entity("Entity.Model.parameters.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<int>("Departamento_id")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Departamento_id");

                    b.ToTable("ciudad");
                });

            modelBuilder.Entity("Entity.Model.parameters.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pais_id")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Pais_id");

                    b.ToTable("departamento");
                });

            modelBuilder.Entity("Entity.Model.parameters.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CiudadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Deleted_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.ToTable("pais");
                });

            modelBuilder.Entity("Entity.Dto.FarmsDto", b =>
                {
                    b.HasOne("Entity.Model.Security.Usuario", null)
                        .WithMany("farms")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Entity.Model.Operational.FarmCrops", b =>
                {
                    b.HasOne("Entity.Model.Operational.Crops", "cropds")
                        .WithMany("farmCrops")
                        .HasForeignKey("cropdsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Operational.Farms", "farms")
                        .WithMany("farmCrops")
                        .HasForeignKey("farmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cropds");

                    b.Navigation("farms");
                });

            modelBuilder.Entity("Entity.Model.Operational.Farms", b =>
                {
                    b.HasOne("Entity.Model.parameters.Ciudad", "ciudad")
                        .WithMany("farms")
                        .HasForeignKey("ciudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Security.Usuario", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ciudad");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Entity.Model.Operational.Fertilization", b =>
                {
                    b.HasOne("Entity.Model.Operational.ReviewTechnicals", "reviewTechnicalss")
                        .WithMany("fertilization")
                        .HasForeignKey("reviewTechnicalssId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reviewTechnicalss");
                });

            modelBuilder.Entity("Entity.Model.Operational.FertilizationSupplies", b =>
                {
                    b.HasOne("Entity.Model.Operational.Fertilization", "fertilization")
                        .WithMany("fertilizationSupplies")
                        .HasForeignKey("fertilizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Operational.Supplies", "supplies")
                        .WithMany("fertilizationSupplies")
                        .HasForeignKey("suppliesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fertilization");

                    b.Navigation("supplies");
                });

            modelBuilder.Entity("Entity.Model.Operational.FumigationSupplies", b =>
                {
                    b.HasOne("Entity.Model.Operational.Fumigations", "fumigations")
                        .WithMany("fumigationSupplies")
                        .HasForeignKey("fumigationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Operational.Supplies", "supplies")
                        .WithMany("fumigationSupplies")
                        .HasForeignKey("suppliesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("fumigations");

                    b.Navigation("supplies");
                });

            modelBuilder.Entity("Entity.Model.Operational.Fumigations", b =>
                {
                    b.HasOne("Entity.Model.Operational.ReviewTechnicals", "reviewTechnicals")
                        .WithMany("fumigations")
                        .HasForeignKey("reviewTechnicalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("reviewTechnicals");
                });

            modelBuilder.Entity("Entity.Model.Operational.Qualifications", b =>
                {
                    b.HasOne("Entity.Model.Operational.AssessmentCriteria", "assessment_criterian")
                        .WithMany("Qualifications")
                        .HasForeignKey("assessment_criterianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Operational.CheckLists", "checklist")
                        .WithMany("qualifications")
                        .HasForeignKey("checklistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assessment_criterian");

                    b.Navigation("checklist");
                });

            modelBuilder.Entity("Entity.Model.Operational.ReviewEvidences", b =>
                {
                    b.HasOne("Entity.Model.Operational.Evidences", "Evidences")
                        .WithMany("ReviewEvidences")
                        .HasForeignKey("EvidencesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Operational.Fumigations", null)
                        .WithMany("reviewEvidences")
                        .HasForeignKey("FumigationsId");

                    b.HasOne("Entity.Model.Operational.ReviewTechnicals", "reviewTechnicals")
                        .WithMany("reviewEvidences")
                        .HasForeignKey("reviewTechnicalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evidences");

                    b.Navigation("reviewTechnicals");
                });

            modelBuilder.Entity("Entity.Model.Operational.ReviewTechnicals", b =>
                {
                    b.HasOne("Entity.Model.Operational.CheckLists", "checkListsd")
                        .WithMany("reviewTechnicals")
                        .HasForeignKey("checkListsdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Operational.Farms", "farms")
                        .WithMany("reviewTechnicals")
                        .HasForeignKey("farmsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("checkListsd");

                    b.Navigation("farms");
                });

            modelBuilder.Entity("Entity.Model.Security.Persona", b =>
                {
                    b.HasOne("Entity.Model.parameters.Ciudad", "ciudad")
                        .WithMany("persona")
                        .HasForeignKey("ciudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ciudad");
                });

            modelBuilder.Entity("Entity.Model.Security.RolVista", b =>
                {
                    b.HasOne("Entity.Model.Security.Rol", "Rol")
                        .WithMany("RolVistas")
                        .HasForeignKey("Rol_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Model.Security.Vista", "Vista")
                        .WithMany("RolVistas")
                        .HasForeignKey("Vista_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("Vista");
                });

            modelBuilder.Entity("Entity.Model.Security.Usuario", b =>
                {
                    b.HasOne("Entity.Model.Security.Persona", "persona")
                        .WithMany("Usuario")
                        .HasForeignKey("Persona_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Model.Security.Rol", null)
                        .WithMany("usuario")
                        .HasForeignKey("RolId");

                    b.Navigation("persona");
                });

            modelBuilder.Entity("Entity.Model.Security.UsuarioRol", b =>
                {
                    b.HasOne("Entity.Model.Security.Rol", "Rol")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("Rol_id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Model.Security.Usuario", "usuario")
                        .WithMany("UsuarioRoles")
                        .HasForeignKey("Usuario_Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Entity.Model.Security.Vista", b =>
                {
                    b.HasOne("Entity.Model.Security.Modulo", "Modulo")
                        .WithMany("vistas")
                        .HasForeignKey("Modulo_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Modulo");
                });

            modelBuilder.Entity("Entity.Model.parameters.Ciudad", b =>
                {
                    b.HasOne("Entity.Model.parameters.Departamento", "departamento")
                        .WithMany("ciudad")
                        .HasForeignKey("Departamento_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("departamento");
                });

            modelBuilder.Entity("Entity.Model.parameters.Departamento", b =>
                {
                    b.HasOne("Entity.Model.parameters.Pais", "pais")
                        .WithMany("departamento")
                        .HasForeignKey("Pais_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pais");
                });

            modelBuilder.Entity("Entity.Model.parameters.Pais", b =>
                {
                    b.HasOne("Entity.Model.parameters.Ciudad", null)
                        .WithMany("pais")
                        .HasForeignKey("CiudadId");
                });

            modelBuilder.Entity("Entity.Model.Operational.AssessmentCriteria", b =>
                {
                    b.Navigation("Qualifications");
                });

            modelBuilder.Entity("Entity.Model.Operational.CheckLists", b =>
                {
                    b.Navigation("qualifications");

                    b.Navigation("reviewTechnicals");
                });

            modelBuilder.Entity("Entity.Model.Operational.Crops", b =>
                {
                    b.Navigation("farmCrops");
                });

            modelBuilder.Entity("Entity.Model.Operational.Evidences", b =>
                {
                    b.Navigation("ReviewEvidences");
                });

            modelBuilder.Entity("Entity.Model.Operational.Farms", b =>
                {
                    b.Navigation("farmCrops");

                    b.Navigation("reviewTechnicals");
                });

            modelBuilder.Entity("Entity.Model.Operational.Fertilization", b =>
                {
                    b.Navigation("fertilizationSupplies");
                });

            modelBuilder.Entity("Entity.Model.Operational.Fumigations", b =>
                {
                    b.Navigation("fumigationSupplies");

                    b.Navigation("reviewEvidences");
                });

            modelBuilder.Entity("Entity.Model.Operational.ReviewTechnicals", b =>
                {
                    b.Navigation("fertilization");

                    b.Navigation("fumigations");

                    b.Navigation("reviewEvidences");
                });

            modelBuilder.Entity("Entity.Model.Operational.Supplies", b =>
                {
                    b.Navigation("fertilizationSupplies");

                    b.Navigation("fumigationSupplies");
                });

            modelBuilder.Entity("Entity.Model.Security.Modulo", b =>
                {
                    b.Navigation("vistas");
                });

            modelBuilder.Entity("Entity.Model.Security.Persona", b =>
                {
                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entity.Model.Security.Rol", b =>
                {
                    b.Navigation("RolVistas");

                    b.Navigation("UsuarioRoles");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Entity.Model.Security.Usuario", b =>
                {
                    b.Navigation("UsuarioRoles");

                    b.Navigation("farms");
                });

            modelBuilder.Entity("Entity.Model.Security.Vista", b =>
                {
                    b.Navigation("RolVistas");
                });

            modelBuilder.Entity("Entity.Model.parameters.Ciudad", b =>
                {
                    b.Navigation("farms");

                    b.Navigation("pais");

                    b.Navigation("persona");
                });

            modelBuilder.Entity("Entity.Model.parameters.Departamento", b =>
                {
                    b.Navigation("ciudad");
                });

            modelBuilder.Entity("Entity.Model.parameters.Pais", b =>
                {
                    b.Navigation("departamento");
                });
#pragma warning restore 612, 618
        }
    }
}
